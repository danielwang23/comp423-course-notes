{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Daniel's COMP423 Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes for COMP423.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go!","text":"<ul> <li>Primary author: Daniel Wang</li> <li>Reviewer: Paul Yang</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>Go (often referred to as Golang) is a statically-typed, open source programming language created by Google to develop web applications, cloud and networking services, and other types of software. It emphasizes simplicity, efficiency, and concurrency, making it popular for modern applications.</p> <p>In this tutorial, you\u2019ll learn how to set up a basic Development Container (dev container) for Go in Visual Studio Code from a blank directory, to configuring git, and running a simple \u201cHello COMP423\u201d program.</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before You Begin</p> <p>Ensure the following prerequisites are met before starting the setup process:</p> <ol> <li>A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</li> <li>Git installed: Install Git if you do not already have it.</li> <li>Docker installed: Required to run the dev container.</li> <li>Install Visual Studio Code (VS Code) and the Remote - Containers plugin under extensions.</li> <li>Have a basic understanding of Git workflows, command-line basics, and containerized development.</li> </ol>"},{"location":"tutorials/go-setup/#step-1-creating-a-new-git-repository","title":"Step 1: Creating a new Git Repository","text":"<ol> <li>Open a new bash terminal (or in VS Code terminal).</li> <li> <p>Create and navigate into a new, empty directory:</p> <pre><code>mkdir go-hello-comp423\ncd go-hello-comp423\n</code></pre> </li> <li> <p>Initialize a new Git repository:</p> <pre><code>git init\n</code></pre> </li> <li> <p>Create a new repository on GitHub, and then link it to your local project:</p> <pre><code>git remote add origin https://github.com/yourusername/go-hello-comp423.git\n</code></pre> </li> <li> <p>Push your initial commit:</p> <pre><code>echo \"# Go DevContainer Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit\"\ngit push -u origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/go-setup/#step-2-configuring-your-dev-container","title":"Step 2: Configuring your Dev Container","text":"<p>We\u2019ll use a Microsoft Go Dev Container base image so that we don\u2019t have to build everything from scratch.</p> <ol> <li> <p>Create a folder named <code>.devcontainer</code>:</p> <pre><code>mkdir .devcontainer\n</code></pre> </li> <li> <p>Inside that folder, create a file called <code>devcontainer.json</code> (can be done with <code>touch .devcontainer/devcontainer.json</code> in terminal) with the following contents:</p> </li> </ol> <pre><code>    {\n      \"name\": \"Go Dev Container\",\n      \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n      \"customizations\": {\n        \"vscode\": {\n          \"extensions\": [\n            \"golang.go\"\n           ]\n         }\n       }\n    }\n</code></pre> <p>Explanation</p> <ul> <li>name: The display name for the container in VS Code.</li> <li>image: Points to a prebuilt Go environment maintained by Microsoft.</li> <li>extensions: Automatically installs the official Go plugin for VS Code (published by the Go Team at Google).</li> </ul> <ol> <li>Commit and push the configuration:</li> </ol> <pre><code>    git add .devcontainer/devcontainer.json\n    git commit -m \"Added DevContainer configuration\"\n    git push\n</code></pre>"},{"location":"tutorials/go-setup/#step-3-open-the-devcontainer","title":"Step 3: Open the DevContainer","text":"<ol> <li>Open your <code>go-hello-comp423</code> project directory in VS Code.</li> <li>Open the Command Palette (Ctrl+Shift+P on Windows/Linux or Cmd+Shift+P on Mac).</li> <li> <p>Search for and select Remote-Containers: Open Folder in Container.</p> <ul> <li>Wait for VS Code to build and provision your container. Once complete, your environment will be running inside the container, with Go and all required tools installed.</li> </ul> </li> <li> <p>Verify the container setup by checking the Go version:</p> <pre><code>go version\n</code></pre> </li> </ol> <p>You should see a recent Go version displayed, for example:</p> <pre><code>    go version go1.20.5 linux/amd64\n</code></pre> <p>This confirms Go is installed successfully in your Dev Container.</p>"},{"location":"tutorials/go-setup/#step-4-create-a-new-go-project","title":"Step 4: Create a New Go Project","text":"<ol> <li> <p>Initialize a new Go module for your project using the <code>mod</code> subcommand:</p> <pre><code>go mod init github.com/&lt;your-username&gt;/go-hello-comp423\n</code></pre> <p>(Replace  with your own GitHub username or any other module path you prefer.) <p>This creates a go.mod file in your project directory, which tracks your module name and any dependencies you add in the future.</p> <p>Why initialize a Go Module?</p> <p>In Go, using modules is the recommended way to track dependencies. The go.mod file records this module name and tracks any libraries you import.</p> <p>The <code>go mod init</code> command sets up a clean and versioned environment for your Go project. It ensures that Go can properly manage dependencies and that your project remains reproducible</p> <li> <p>Create a new file, main.go:</p> <pre><code>touch main.go\n</code></pre> </li> <li> <p>In <code>main.go</code>, write a simple Go program:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre> </li> <li> <p>Verify your Go module: After creating the main.go file, you can view your module's details by running:</p> <pre><code>    go list -m all\n</code></pre> <p>This will display the current module (<code>github.com/yourusername/go-hello-comp423</code>) and any dependencies (if added).</p> </li>"},{"location":"tutorials/go-setup/#step-5-run-the-program","title":"Step 5: Run the Program","text":"<p>Running Go Programs</p> <p>You can run Go programs directly without building them using the <code>go run</code> command.</p> <ol> <li>Run the program using <code>go run</code>:</li> </ol> <pre><code>    go run main.go\n</code></pre> <p>You should see the output:</p> <pre><code>    Hello COMP423\n</code></pre>"},{"location":"tutorials/go-setup/#step-6-building-your-program","title":"Step 6: Building your program","text":"<p>Alternatively, you can use <code>go build</code> which compiles your Go code into a binary file that is compiled, and executable.</p> <ol> <li> <p>Build the project:</p> <pre><code>go build main.go\n</code></pre> </li> <li> <p>After building, you will see a binary executable file named <code>main</code> (on Linux/macOS)</p> </li> <li> <p>Run the binary file directly:</p> <pre><code>    ./main\n</code></pre> <p>This should again print:</p> <pre><code>    Hello COMP423\n</code></pre> </li> </ol> <p>Difference Between <code>run</code> and <code>build</code></p> <ul> <li><code>go run</code>: Compiles and runs the code immediately but doesn't create a binary file. </li> <li><code>go build</code>: Compiles the code into a binary executable file, which can be kept, dsitributed, or executed multiple times later without recompiling.</li> </ul>"},{"location":"tutorials/go-setup/#step-7-commiting-your-work-and-sharing","title":"Step 7: Commiting your work and Sharing","text":"<ol> <li>Commit and Push changes in your program to Github:<pre><code>git add main.go\ngit commit -m \"Added Hello COMP423 program\"\ngit push\n</code></pre> </li> </ol> <p>Success</p> <p>Congratulations, now you have successfully completed the tutorial!</p>"},{"location":"tutorials/go-setup/#summary","title":"Summary","text":"<p>Congratulations! Throughout this tutorial you have:</p> <ul> <li>Started from a blank directory and initialized a Git repository.</li> <li>Created a Dev Container configuration using Microsoft\u2019s base Go image.</li> <li>Installed the official Go plugin for VS Code.</li> <li>Written a \u201cHello COMP423\u201d program in Go.</li> <li>Explored both go run for executing your program.</li> <li>You\u2019re now set up with a reproducible, containerized Go development environment! Keep experimenting with Go modules, package imports, testing, and more as you progress through your Go journey.</li> </ul>"},{"location":"tutorials/go-setup/#references","title":"References:","text":"<ul> <li>Go (programming language)</li> <li>Go Documentation</li> <li>Go Library</li> <li>Go Plugin</li> </ul>"}]}